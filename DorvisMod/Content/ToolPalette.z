class ToolChangeEvent : Event
{
    var Index : Integer = 0;
    var LastIndex : Integer = 0;
    var Peer : LockStepPeer = null;
    var CameraCog : Cog = null;
    
    constructor() : base() {}
}

class ToolPalette : ScriptComponent
{
    var Tools : Array[Cog] = new Array[Cog]();
    var CurrentToolIndex : Integer = 0;
    var Peer : LockStepPeer = null;
    var CameraCog : Cog = null;
    var LastActiveTool : Cog = null;
    
    constructor() : base()
    {
    }
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Owner, "LockStepInit", this.OnLockStepInit);
    }
    
    function OnLockStepInit(e : LockStepInitEvent)
    {
        this.Peer = e.Peer;
        this.CameraCog = e.CameraCog;
        Zero.Connect(this.Peer as Cog, Events.LockStepKeyDown, this.OnLockStepKeyDown);
        
        
        //Add tools here
        var blockSpawner = this.Owner.FindChildByName("BlockSpawnTool");
        this.Tools.Add(blockSpawner);
        
        var grabber = this.Owner.FindChildByName("GrabberTool");
        this.Tools.Add(grabber);
        
        this.LastActiveTool = blockSpawner;
        
        //Default to the spawner tool
        this.SendToolEvent("ActivateTool", blockSpawner);
    }
    
    function OnLockStepKeyDown(e : LockStepKeyEvent)
    {
        //Change tool
        var index = e.Key - Keys.One;
        
        if(index == -1)
        {
            index = 9;
        }
        
        if(index < -1 || index >= this.Tools.Count)
        {
            return;
        }
        
        var newTool = this.Tools.Get(index);
        if(this.LastActiveTool == newTool)
        {
            return;
        }
        
        this.SendToolEvent("DeactivateTool", this.LastActiveTool);
        this.LastActiveTool = newTool;
        this.SendToolEvent("ActivateTool", this.LastActiveTool);
    }
    
    function SendToolEvent(eventName : String, obj : Cog)
    {
        var toSend = new ToolChangeEvent();
        toSend.Peer = this.Peer;
        toSend.CameraCog = this.CameraCog;
        obj.DispatchEvent(eventName, toSend as Event);
    }
}
