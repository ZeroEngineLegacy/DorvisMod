class GameStartup : ZilchComponent
{
    var Random : Random = new Random();
    
    var MainSpace : Space = null;
    
    [Property]
    var Level : Level = Level.Find("Environment");
    [Property]
    var SpaceToCreate : Archetype = Archetype.Find("Space");
    
    [Property]
    var Player : Archetype = Archetype.Find("Player");
    
    constructor() : base()
    {
        this.Random.Seed = 10239;
    }

    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Owner, Events.LockStepGameStarted, this.OnLockStepGameStarted);
        Zero.Connect(this.Owner, Events.GameRequestQuit, this.OnGameRequestQuit);
    }
    
    function OnGameRequestQuit(e : GameEvent)
    {
        //e.Handled = true;
    }

    function OnLockStepGameStarted(e : LockStepGameStartEvent)
    {
        this.MainSpace = this.GameSession.CreateNamedSpace("Main", this.SpaceToCreate);
        this.MainSpace.LoadLevel(this.Level);
        
        // Always clear the store so we can use it for duplicating, copy/paste, and undos
        Zero.ObjectStore.ClearStore();
        
        // A counter for ids
        var idCounter = 0;
        
        foreach (var peer in e.Peers)
        {
            var position = this.Random.Real3(0.0, 200.0);
            position.Y = 0.0;
            
            var player = this.MainSpace.Create(this.Player);
            
            player.Transform.WorldTranslation = position;
            
            var unsafeIsLocal = peer == this.Owner.LockStepGame.UnsafeLocalPeer;
            
            //Console.WriteLine(Archetype.Find("Player").Name);
            
            player.Player.LockStepInitialize(peer, idCounter, unsafeIsLocal);
            ++idCounter;
            
            if (unsafeIsLocal)
            {
                var camCog = player.FindChildByName("Camera");
                camCog.Microphone.Active = true;
                var levelSettings = this.MainSpace.FindObjectByName("LevelSettings");
                levelSettings.CameraViewport.Camera = camCog;
                this.Owner.LockStepMouse.InputCameraViewport = levelSettings;
                
                Zero.Mouse.Trapped = true;
                
                var hudCameraCog = player.Player.Hud.FindObjectByName("HudCamera");
                
                //hudCameraCog.CameraViewport.Active = true;
            }
        }
    }
}
