class GameStartup : ScriptComponent
{
    var Random : Random = new Random();
    
    var MainSpace : Space = null;
    
    [Editable][Serialized][Level]
    var Level : String = "MainLevel";
    
    constructor() : base()
    {
        this.Random.Seed(10239);
    }

    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Owner, Events.LockStepGameStarted, this.OnLockStepGameStarted);
    }

    function OnLockStepGameStarted(e : LockStepGameStartEvent)
    {
        // Always clear the store so we can use it for duplicating, copy/paste, and undos
        Zero.ObjectStore.ClearStore();
        
        this.MainSpace = Zero.Game.CreateSpace("Space");
        this.MainSpace.LoadLevel(this.Level);
        
        // A counter for ids
        var idCounter = 0;
        
        foreach (var peer in e.GetPeers())
        {
            var position = this.Random.Real3(0.0, 200.0);
            position.Y = 0.0;
            
            var player = this.MainSpace.Create("Player");
            
            player.Transform.WorldTranslation = position;
            
            var unsafeIsLocal = peer == this.Owner.LockStepGame.GetUnsafeLocalPeer();
            
            player.Player.LockStepInitialize(peer, idCounter, unsafeIsLocal);
            ++idCounter;
            
            if (unsafeIsLocal)
            {
                var camCog = player.FindChildByName("Camera");
                camCog.Microphone.Active = true;
                var levelSettings = this.MainSpace.FindObjectByName("LevelSettings");
                var viewport = levelSettings.CameraViewport.Viewport;
                levelSettings.CameraViewport.Camera = camCog;
                this.Owner.LockStepMouse.SetInputViewport(viewport);
                this.Owner.LockStepKeyboard.SetInputViewport(viewport);
                viewport.SetMouseTrap(true);
                
                player.Player.Hud.FindObjectByName("Camera").CameraViewport.Active = true;
            }
        }
    }
}
