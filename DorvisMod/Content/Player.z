class Player : ScriptComponent
{
    [Editable][Serialized]
    var Speed : Real = 10.0;
    [Editable][Serialize]
    var LookSpeed : Real = 1.0;
    [Editable][Serialize]
    var JumpVelocity : Real = 1.0;
    [Editable][Serialize]
    var InteractDistance : Real = 6.0;
    
    var RotationAngles : Real2 = local Real2(0.0, 0.0);
    var CameraCog : Cog = null;
    var Peer : LockStepPeer = null;
    var ToolContainer : Cog = null;
    
    var Movement : Real3 = local Real3();
    
    var JumpPressed : Boolean = false;
    var Hud : Space = null;
    var HudContextText : ShadowText = null;
    var HudToolText : ShadowText = null;
    var HudToolSubText : ShadowText = null;
    
    var InteractMessage : String = null;
    var InteractCog : Cog = null;
    
    var Tools : Array[Cog] = new Array[Cog]();
    var ActiveTool : Cog = null;
    
    constructor() : base()
    {
    }

    function Initialize(init : CogInitializer)
    {
    }
    
    function LockStepInitialize(peer : LockStepPeer)
    {
        this.Peer = peer;
        this.CameraCog = this.Owner.FindChildByName("Camera");
        
        Zero.Connect(this.Space as Cog, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(peer as Cog, Events.LockStepMouseMove, this.OnLockStepMouseMove);
        Zero.Connect(peer as Cog, Events.LockStepMouseDown, this.OnLockStepMouseDown);
        Zero.Connect(peer as Cog, Events.LockStepMouseUp, this.OnLockStepMouseUp);
        Zero.Connect(peer as Cog, Events.LockStepKeyDown, this.OnLockStepKeyDown);
        Zero.Connect(peer as Cog, Events.LockStepKeyUp, this.OnLockStepKeyUp);
        
        
        this.ToolContainer = this.Owner.FindChildByName("ToolContainer");
        
        this.Hud = Zero.Game.CreateSpace("DefaultSpace");
        this.Hud.GraphicsSpace.SpriteSmoothing = true;
        this.Hud.GraphicsSpace.PixelSnapping = true;
        this.Hud.LoadLevel("Hud");
        this.HudContextText = this.Hud.FindObjectByName("ContextText").ShadowText;
        this.HudToolText = this.Hud.FindObjectByName("ToolText").ShadowText;
        this.HudToolSubText = this.Hud.FindObjectByName("ToolSubText").ShadowText;
        
        //Add tools here
        var blockSpawner = this.Owner.FindChildByName("BlockSpawnTool");
        var grabber = this.Owner.FindChildByName("GrabberTool");
        var thrusterSpawner = this.Owner.FindChildByName("ThrusterSpawnTool");
        this.Tools.Add(blockSpawner);
        this.Tools.Add(grabber);
        this.Tools.Add(thrusterSpawner);
        
        this.ActivateTool(blockSpawner);
    }
    
    function Destroyed()
    {
        this.Hud.Destroy();
    }
    
    function AddMovement(e : LockStepKeyEvent, key : Integer, movement : Real3)
    {
        if (e.Key == key)
        {
            this.Movement += movement;
        }
    }
    
    function OnLogicUpdate(e : UpdateEvent)
    {
        var playerRotation = local Real3(0.0, this.RotationAngles.Y, 0.0);
        var cameraRotation = local Real3(this.RotationAngles.X, Math.Pi, 0.0);
        this.Owner.Transform.SetRotationAngles(playerRotation);
        this.CameraCog.Transform.SetRotationAngles(cameraRotation);
        
        if(this.JumpPressed)
        {
            this.Owner.RigidBody.ApplyLinearVelocity(local Real3(0.0, this.JumpVelocity, 0.0));
        }
        
        var movement = this.Owner.Transform.TransformNormal(this.Movement);
        movement.Y = 0.0;
        this.Owner.DynamicMotor.MoveInDirection(movement * local Real3(this.Speed), local Real3(0.0, 1.0, 0.0));
        
        this.InteractMessage = null;
        var result = this.RayCast(this.InteractFilter, this.InteractDistance);
        
        if (result != null)
        {
            this.InteractCog = result.Object;
            this.HudContextText.Text = this.InteractMessage;
        }
        else
        {
            this.InteractCog = null;
            this.HudContextText.Text = "";
        }
    }
    
    function InteractFilter(hit : Cog) : Boolean
    {
        var e = new InteractEvent();
        e.PlayerCog = this.Owner;
        hit.DispatchEvent("TestInteract", e as Event);
        this.InteractMessage = e.Message;
        
        // Commenting this in will cause a crash... WHY? (because it's null!)
        //Console.WriteLine(e.Message);
        return e.Message != null;
    }
    
    function RayCast(filter : delegate(hit : Cog) : Boolean) : HitResult
    {
        return this.RayCast(filter, 100000.0);
    }
    
    function RayCast(filter : delegate(hit : Cog) : Boolean, maxDistance : Real) : HitResult
    {
        var dir = this.CameraCog.Orientation.GetWorldForward();
        var start = this.CameraCog.Transform.WorldTranslation;
        
        var foundObject : Cog = null;
        var worldNormal = local Real3(0.0, 0.0, 0.0);
        
        var castResults = this.Space.PhysicsSpace.CastRayResults(start, dir, 20);
        foreach(var castResult in castResults)
        {
            if (castResult.GetDistance() > maxDistance)
            {
                break;
            }
            
            var hitObject = castResult.GetObjectHit();
            
            if (filter(hitObject))
            {
                foundObject = hitObject;
                worldNormal = castResult.GetNormal();
                break;
            }
            
        }
        
        var nullResult : HitResult = null;
        
        if(foundObject == null)
        {
            return nullResult;
        }
        
        var result = new HitResult();
        result.Object = foundObject;
        result.WorldNormal = worldNormal;
        
        return result;
    }
    
    function OnLockStepMouseMove(e : LockStepMouseEvent)
    {
        this.RotationAngles.Y -= e.ScreenDelta.X * this.LookSpeed;
        this.RotationAngles.X -= e.ScreenDelta.Y * this.LookSpeed;
        
        var maxDown = -Math.Pi / 2.0;
        var maxUp = Math.Pi / 2.0;
        
        if (this.RotationAngles.X < maxDown)
        {
            this.RotationAngles.X = maxDown;
        }
        
        if (this.RotationAngles.X > maxUp)
        {
            this.RotationAngles.X = maxUp;
        }
    }
    
    function OnLockStepMouseDown(e : LockStepMouseButtonEvent)
    {
    }
    
    function OnLockStepMouseUp(e : LockStepMouseButtonEvent)
    {
    }
    
    function OnLockStepKeyDown(e : LockStepKeyEvent)
    {
        this.AddMovement(e, Keys.W, local Real3( 0.0, 0.0,  1.0));
        this.AddMovement(e, Keys.S, local Real3( 0.0, 0.0, -1.0));
        this.AddMovement(e, Keys.A, local Real3( 1.0, 0.0,  0.0));
        this.AddMovement(e, Keys.D, local Real3(-1.0, 0.0,  0.0));
        
        if(e.Key == Keys.Space)
        {
            this.JumpPressed = true;
        }
        
        if(e.Key == Keys.E && this.InteractCog != null)
        {
            var toSend = new InteractEvent();
            toSend.PlayerCog = this.Owner;
            this.InteractCog.DispatchEvent("Interact", toSend as Event);
        }
        
        //Change tool
        var index = e.Key - Keys.One;
        
        if(index == -1)
        {
            index = 9;
        }
        
        if(index < -1 || index >= this.Tools.Count)
        {
            return;
        }
        
        var newTool = this.Tools.Get(index);
        if(this.ActiveTool == newTool)
        {
            return;
        }
        
        this.SendToolEvent("DeactivateTool", this.ActiveTool);
        this.ActivateTool(newTool);
    }
    
    function ActivateTool(tool : Cog)
    {
        this.HudToolText.Text = tool.Name;
        this.HudToolSubText.Text = "";
        this.ActiveTool = tool;
        this.SendToolEvent("ActivateTool", this.ActiveTool);
    }
    
    function OnLockStepKeyUp(e : LockStepKeyEvent)
    {
        this.AddMovement(e, Keys.W, local Real3( 0.0, 0.0, -1.0));
        this.AddMovement(e, Keys.S, local Real3( 0.0, 0.0,  1.0));
        this.AddMovement(e, Keys.A, local Real3(-1.0, 0.0,  0.0));
        this.AddMovement(e, Keys.D, local Real3( 1.0, 0.0,  0.0));
        
        if(e.Key == Keys.Space)
        {
            this.JumpPressed = false;
        }
    }
    
    function SendToolEvent(eventName : String, obj : Cog)
    {
        var toSend = new ToolChangeEvent();
        toSend.Peer = this.Peer;
        toSend.CameraCog = this.CameraCog;
        toSend.PlayerCog = this.Owner;
        toSend.Player = this;
        toSend.HudText = this.HudToolSubText;
        obj.DispatchEvent(eventName, toSend as Event);
    }
}

class HitResult
{
    constructor()
    {
    }
    
    var Object : Cog = null;
    var WorldNormal : Real3 = local Real3();
}

class InteractEvent : Event
{
    // If this gets set to anything but null, it means someone responded
    var Message : String = null;
    
    var PlayerCog : Cog = null;
    
    
    constructor() : base()
    {
    }
}

class ToolChangeEvent : Event
{
    var Index : Integer = 0;
    var LastIndex : Integer = 0;
    var Peer : LockStepPeer = null;
    var CameraCog : Cog = null;
    var PlayerCog : Cog = null;
    var Player : Player = null;
    var HudText : ShadowText = null;
    
    constructor() : base() {}
}
