class LockStepInitEvent : Event
{
    constructor() : base() {}
    
    var Peer : LockStepPeer = null;
    var CameraCog : Cog = null;
}

class Player : ScriptComponent
{
    [Editable][Serialized]
    var Speed : Real = 10.0;
    [Editable][Serialize]
    var LookSpeed : Real = 1.0;
    
    var RotationAngles : Real2 = local Real2(0.0, 0.0);
    var CameraCog : Cog = null;
    var ToolContainer : Cog = null;
    
    constructor() : base()
    {
    }

    function Initialize(init : CogInitializer)
    {
    }
    
    function LockStepInitialize(peer : LockStepPeer)
    {
        this.CameraCog = this.Owner.FindChildByName("Camera");
        this.CameraCog.CameraViewport.Viewport.SetMouseTrap(true);
        
        Zero.Connect(this.Space as Cog, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(peer as Cog, Events.LockStepMouseMove, this.OnLockStepMouseMove);
        Zero.Connect(peer as Cog, Events.LockStepMouseDown, this.OnLockStepMouseDown);
        Zero.Connect(peer as Cog, Events.LockStepMouseUp, this.OnLockStepMouseUp);
        Zero.Connect(peer as Cog, Events.LockStepKeyDown, this.OnLockStepKeyDown);
        Zero.Connect(peer as Cog, Events.LockStepKeyUp, this.OnLockStepKeyUp);
        
        
        this.ToolContainer = this.Owner.FindChildByName("ToolContainer");
        var toSend = new LockStepInitEvent();
        toSend.Peer = peer;
        toSend.CameraCog = this.CameraCog;
        this.ToolContainer.DispatchEvent("LockStepInit", toSend as Event);
    }
    
    function OnLogicUpdate(e : UpdateEvent)
    {
        var playerRotation = local Real3(0.0, this.RotationAngles.Y, 0.0);
        var cameraRotation = local Real3(this.RotationAngles.X, 0.0, 0.0);
        this.Owner.Transform.SetRotationAngles(playerRotation);
        this.CameraCog.Transform.SetRotationAngles(cameraRotation);
        
        var movement = local Real3(0.0, 0.0, 0.0);
        if(Zero.Keyboard.KeyIsDown(Keys.A))
        {
            movement.X -= 1.0;
        }
        if(Zero.Keyboard.KeyIsDown(Keys.D))
        {
            movement.X += 1.0;
        }
        if(Zero.Keyboard.KeyIsDown(Keys.W))
        {
            movement.Z -= 1.0;
        }
        if(Zero.Keyboard.KeyIsDown(Keys.S))
        {
            movement.Z += 1.0;
        }
        
        if(Zero.Keyboard.KeyIsDown(Keys.Space))
        {
            this.Owner.RigidBody.ApplyLinearVelocity(local Real3(0.0, 2.0, 0.0));
        }
        
        movement = this.Owner.Transform.TransformNormal(movement);
        movement.Y = 0.0;
        this.Owner.DynamicMotor.MoveInDirection(movement * local Real3(this.Speed), local Real3(0.0, 1.0, 0.0));
    }
    
    function OnLockStepMouseMove(e : LockStepMouseEvent)
    {
        this.RotationAngles.Y -= e.ScreenDelta.X * this.LookSpeed;
        this.RotationAngles.X -= e.ScreenDelta.Y * this.LookSpeed;
    }
    
    function OnLockStepMouseDown(e : LockStepMouseButtonEvent)
    {
    }
    
    function OnLockStepMouseUp(e : LockStepMouseButtonEvent)
    {
    }
    
    function OnLockStepKeyDown(e : LockStepKeyEvent)
    {
        //this.Owner.RigidBody.ApplyForce(local Real3(0.0, 150.0, 0.0));
    }
    
    function OnLockStepKeyUp(e : LockStepKeyEvent)
    {
    }
}
