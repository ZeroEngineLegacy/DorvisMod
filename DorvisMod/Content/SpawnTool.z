class SpawnTool : ScriptComponent
{
    var GameViewport : GameViewport = null;
    var Index : Integer = 0;
    var CameraCog : Cog = null;
    var PlayerCog : Cog = null;
    var Player : Player = null;
    var HudText : ShadowText = null;
    var Ghost : DebugObb = new DebugObb();
    var IsOverBlock : Boolean = false;
    var DestroyMode : Boolean = false;
    
    [Editable][Serialized][Archetype]
    var ObjToSpawn : String = "Block";
    
    constructor() : base()
    {
    }

    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Owner, "ActivateTool", this.OnActivateTool);
        Zero.Connect(this.Owner, "DeactivateTool", this.OnDeativateTool);
    }
    
    function OnActivateTool(e : ToolChangeEvent)
    {
        this.CameraCog = e.CameraCog;
        this.PlayerCog = e.PlayerCog;
        this.Player = e.Player;
        this.HudText = e.HudText;
        Zero.Connect(e.Peer as Cog, Events.LockStepKeyDown, this.OnLockStepKeyDown);
        Zero.Connect(e.Peer as Cog, Events.LockStepKeyUp, this.OnLockStepKeyUp);
        Zero.Connect(e.Peer as Cog, Events.LockStepMouseDown, this.OnLockStepMouseDown);
        Zero.Connect(e.Peer as Cog, Events.LockStepMouseMove, this.OnLockStepMouseMove);
        Zero.Connect(this.Space as Cog, Events.LogicUpdate, this.OnLogicUpdate);
    }
    
    function OnDeativateTool(e : ToolChangeEvent)
    {
        this.CameraCog = null;
        this.PlayerCog = null;
        this.Player = null;
        this.HudText = null;
        Zero.Disconnect(e.Peer as Cog, Events.LockStepMouseDown, this as Component);
        Zero.Disconnect(e.Peer as Cog, Events.LockStepMouseMove, this as Component);
        Zero.Disconnect(this.Space as Cog, Events.LogicUpdate, this as Component);
    }
    
    function OnLogicUpdate(e : UpdateEvent)
    {
        this.IsOverBlock = false;
        var result = this.Player.RayCast(this.BlockFilter);
        
        if (result == null)
        {
            if (this.DestroyMode == false)
            {
                this.HudText.Text = "Press [Left Mouse] to spawn";
            }
            else
            {
                this.HudText.Text = "";
            }
            return;
        }
        
        this.IsOverBlock = true;
        var pos = result.Object.Transform.WorldTranslation;
        var color = local Real4(1.0, 0.0, 0.0, 1.0);
        
        
        if (this.DestroyMode == false)
        {
            this.HudText.Text = "Press [Left Mouse] to attach";
            pos  += result.WorldNormal;
            color = local Real4(1.0);
        }
        else
        {
            this.HudText.Text = "Press [Left Mouse] to destroy";
        }
        
        this.Ghost.SpaceId(this.Space.GetRuntimeId());
        this.Ghost.Float4Color(color);
        this.Ghost.Extents(local Real3(0.5));
        this.Ghost.Rotation(result.Object.Transform.WorldRotation);
        this.Ghost.Position(pos);
        this.Ghost.Partial(true);
        this.Ghost.Draw();
    }
    
    function OnLockStepKeyDown(e : LockStepKeyEvent)
    {
        if (e.Key == Keys.Shift)
        {
            this.DestroyMode = true;
        }
    }
    
    function OnLockStepKeyUp(e : LockStepKeyEvent)
    {
        if (e.Key == Keys.Shift)
        {
            this.DestroyMode = false;
        }
    }
    
    function OnLockStepMouseDown(e : LockStepMouseButtonEvent)
    {
        if(this.DestroyMode)
        {
            this.DestroyObj(e);
        }
        else
        {
            this.SpawnObj(e, this.ObjToSpawn);
        }
    }
    
    function BlockFilter(hit : Cog) : Boolean
    {
        return hit.BlockTag != null;
    }
    
    function AnyFilter(hit : Cog) : Boolean
    {
        return true;
    }
    
    function OnLockStepMouseMove(e : LockStepMouseEvent)
    {
    }
    
    [Static]
    function Sign(input : Real) : Real
    {
        if (input > 0.0)
        {
            return 1.0;
        }
        else if (input < 0.0)
        {
            return -1.0;
        }
        
        return 0.0;
    }
    
    [Static]
    function SnapToCardinalDirection(input : Real3) : Real3
    {
        // I really have no idea what's the best way to go about this
        var dx = Math.Abs(input.X);
        var dy = Math.Abs(input.Y);
        var dz = Math.Abs(input.Z);
        
        if (dx > dy)
        {
            // X is greater than Y... so lets check against Z
            if (dx > dz)
            {
                // X is the greatest
                return local Real3(SpawnTool.Sign(input.X), 0.0, 0.0);
            }
            else
            {
                // Z is the greatest
                return local Real3(0.0, 0.0, SpawnTool.Sign(input.Z));
            }
        }
        else
        {
            // Y is greater than X... so lets check against Z
            if (dy > dz)
            {
                // Y is the greatest
                return local Real3(0.0, SpawnTool.Sign(input.Y), 0.0);
            }
            else
            {
                // Z is the greatest
                return local Real3(0.0, 0.0, SpawnTool.Sign(input.Z));
            }
        }
    }
    
    [Static]
    function SnapToCardinalDirectionOrZ(input : Real3) : Real3
    {
        var result = SpawnTool.SnapToCardinalDirection(input);
        
        if (Math.LengthSq(result) < 0.5)
        {
            result = local Real3(0.0, 0.0, 1.0);
        }
        
        return result;
    }
    
    function SpawnObj(e : LockStepMouseButtonEvent, objToSpawn : String)
    {
        var attach = true;
        var result = this.Player.RayCast(this.BlockFilter);
        
        if (result == null)
        {
            result = this.Player.RayCast(this.AnyFilter);
            attach = false;
            
            if (result == null)
            {
                return;
            }
        }
        
        var newObj = this.Space.Create(objToSpawn);
        
        if (attach)
        {
            var tx = result.Object.Transform;
            var localNormal = tx.TransformNormalInverse(result.WorldNormal);
            
            localNormal = SpawnTool.SnapToCardinalDirection(localNormal);
            
            if (Math.LengthSq(localNormal) < 0.5)
            {
                return;
            }
            
            newObj.Transform.Translation = localNormal;
            
            var worldForward = this.Player.WorldLookDirection;
            var localForward = tx.TransformNormalInverse(worldForward);
            
            // Project the forward vector onto the plane made by the normal
            localForward -= Math.Project(localForward, localNormal);
            localForward = SpawnTool.SnapToCardinalDirectionOrZ(localForward);
            
            // Cross the forward and up to get the right vector
            var localRight = Math.Cross(localForward, localNormal);
            
            // We flip the bases because we want to to do a 180 and face away from us
            localRight = localRight * local Real3(-1.0);
            localForward = localForward * local Real3(-1.0);
            
            newObj.Transform.SetRotationBases(localForward, localNormal, localRight);
            //newObj.Transform.Rotation = Math.RotationQuaternionBetween(local Real3(0.0, 1.0, 0.0), localNormal);
            if(newObj.RigidBody != null)
            {
                newObj.RigidBody.Static = true;
            }
            newObj.AttachTo(result.Object);
        }
        else
        {
            newObj.Transform.WorldTranslation = result.WorldPosition + result.WorldNormal * local Real3(0.5);
            newObj.Transform.WorldRotation = this.PlayerCog.Transform.WorldRotation;
        }
        
        this.Space.CreateAtPosition("SpawnEffect", newObj.Transform.WorldTranslation);
        
        var undoName = String.Concatenate("spawning a ", this.ObjToSpawn);
        var undo = new SpawnUndo();
        undo.Object = newObj;
        this.Player.QueueUndo(undoName, undo.Action);
    }
    
    function DestroyObj(e : LockStepMouseButtonEvent)
    {
        var result = this.Player.RayCast(this.BlockFilter);
        
        if (result == null)
        {
            return;
        }
        
        var undoName = String.Concatenate("destroying a ", this.ObjToSpawn);
        var undoInfo = this.Player.QueueUndo(undoName);
        
        // Store it in the object store for undo purposes
        Zero.ObjectStore.Store(undoInfo.UniqueName, result.Object);
        
        var worldPosition = result.Object.Transform.WorldTranslation;
        
        var undo = new DestroyUndo();
        undo.Space = this.Space;
        undo.Parent = result.Object.GetParent();
        undo.WorldPosition = worldPosition;
        undo.WorldRotation = result.Object.Transform.WorldRotation;
        undoInfo.Action = undo.Action;
        
        this.Space.CreateAtPosition("DestroyEffect", worldPosition);
        result.Object.Destroy();
    }
}

class SpawnUndo
{
    var Object : Cog = null;
    
    constructor()
    {
    }
    
    function Action(undo : Undo) : Boolean
    {
        if (this.Object != null)
        {
            var worldPosition = this.Object.Transform.WorldTranslation;
            this.Object.Space.CreateAtPosition("DestroyEffect", worldPosition);
            this.Object.Destroy();
            return true;
        }
        
        return false;
    }
}

class DestroyUndo
{
    var Space : Space = null;
    var Parent : Cog = null;
    var WorldPosition : Real3 = local Real3();
    var WorldRotation : Quat = local Quat();
    
    constructor()
    {
    }
    
    function Action(undo : Undo) : Boolean
    {
        if (this.Space != null)
        {
            var cog = Zero.ObjectStore.Restore(undo.UniqueName, this.Space);
            
            if (cog != null)
            {
                if (this.Parent != null)
                {
                    cog.AttachTo(this.Parent);
                }
                else
                {
                    cog.Transform.WorldTranslation = this.WorldPosition;
                    cog.Transform.WorldRotation = this.WorldRotation;
                    
                    if (cog.RigidBody != null)
                    {
                        cog.RigidBody.Static = false;
                    }
                }
                
                this.Space.CreateAtPosition("SpawnEffect", cog.Transform.WorldTranslation);
                return true;
            }
        }
        
        return false;
    }
}
