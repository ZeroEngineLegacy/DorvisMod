class SpawnTool : ScriptComponent
{
    var GameViewport : GameViewport = null;
    var Index : Integer = 0;
    var CameraCog : Cog = null;
    var Player : Player = null;
    var HudText : ShadowText = null;
    var Ghost : DebugObb = new DebugObb();
    var IsOverBlock : Boolean = false;
    var DestroyMode : Boolean = false;
    
    [Editable][Serialized]
    var ObjToSpawn : String = "Block";
    
    constructor() : base()
    {
    }

    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Owner, "ActivateTool", this.OnActivateTool);
        Zero.Connect(this.Owner, "DeactivateTool", this.OnDeativateTool);
    }
    
    function OnActivateTool(e : ToolChangeEvent)
    {
        this.CameraCog = e.CameraCog;
        this.Player = e.Player;
        this.HudText = e.HudText;
        Zero.Connect(e.Peer as Cog, Events.LockStepKeyDown, this.LockStepKeyDown);
        Zero.Connect(e.Peer as Cog, Events.LockStepKeyUp, this.LockStepKeyUp);
        Zero.Connect(e.Peer as Cog, Events.LockStepMouseDown, this.LockStepMouseDown);
        Zero.Connect(e.Peer as Cog, Events.LockStepMouseMove, this.LockStepMouseMove);
        Zero.Connect(this.Space as Cog, Events.LogicUpdate, this.OnLogicUpdate);
    }
    
    function OnDeativateTool(e : ToolChangeEvent)
    {
        this.CameraCog = null;
        this.Player = null;
        this.HudText = null;
        Zero.Disconnect(e.Peer as Cog, Events.LockStepMouseDown, this as Component);
        Zero.Disconnect(e.Peer as Cog, Events.LockStepMouseMove, this as Component);
        Zero.Disconnect(this.Space as Cog, Events.LogicUpdate, this as Component);
    }
    
    function OnLogicUpdate(e : UpdateEvent)
    {
        this.IsOverBlock = false;
        var result = this.Player.RayCast(this.BlockFilter);
        
        if (result == null)
        {
            this.HudText.Text = "";
            return;
        }
        
        this.IsOverBlock = true;
        var pos = result.Object.Transform.WorldTranslation;
        var color = local Real4(1.0, 0.0, 0.0, 1.0);
        
        
        if (this.DestroyMode == false)
        {
            this.HudText.Text = "Create";
            pos  += result.WorldNormal;
            color = local Real4(1.0);
        }
        else
        {
            this.HudText.Text = "Destroy";
        }
        
        this.Ghost.SpaceId(this.Space.GetRuntimeId());
        this.Ghost.Float4Color(color);
        this.Ghost.Extents(local Real3(0.5));
        this.Ghost.Rotation(result.Object.Transform.WorldRotation);
        this.Ghost.Position(pos);
        this.Ghost.Partial(true);
        this.Ghost.Draw();
    }
    
    function LockStepKeyDown(e : LockStepKeyEvent)
    {
        if (e.Key == Keys.Shift)
        {
            this.DestroyMode = true;
        }
    }
    
    function LockStepKeyUp(e : LockStepKeyEvent)
    {
        if (e.Key == Keys.Shift)
        {
            this.DestroyMode = false;
        }
    }
    
    function LockStepMouseDown(e : LockStepMouseButtonEvent)
    {
        if(this.DestroyMode)
        {
            this.DestroyObj(e);
        }
        else
        {
            this.SpawnObj(e, this.ObjToSpawn);
        }
    }
    
    function BlockFilter(hit : Cog) : Boolean
    {
        return hit.BlockTag != null;
    }
    
    function LockStepMouseMove(e : LockStepMouseEvent)
    {
    }
    
    function SpawnObj(e : LockStepMouseButtonEvent, objToSpawn : String)
    {
        var result = this.Player.RayCast(this.BlockFilter);
        
        if (result == null)
        {
            return;
        }
        
        var localNormal = result.Object.Transform.TransformNormalInverse(result.WorldNormal);
        var newObjPos = localNormal;
        
        var newObj = this.Space.CreateAtPosition(objToSpawn, newObjPos);
        if(newObj.RigidBody != null)
        {
            newObj.RigidBody.Static = true;
        }
        newObj.Transform.Rotation = Math.RotationQuaternionBetween(local Real3(0.0, 1.0, 0.0), localNormal);
        newObj.AttachTo(result.Object);
        this.Space.CreateAtPosition("SpawnEffect", newObj.Transform.WorldTranslation);
    }
    
    function DestroyObj(e : LockStepMouseButtonEvent)
    {
        var result = this.Player.RayCast(this.BlockFilter);
        
        if (result == null)
        {
            return;
        }
        
        result.Object.Destroy();
        this.Space.CreateAtPosition("DestroyEffect", result.Object.Transform.WorldTranslation);
    }
}
