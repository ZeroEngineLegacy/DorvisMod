class SpaceCamera : ScriptComponent
{
    [Property]
    var SpaceToCreate : Archetype = Archetype.Find("DefaultSpace");
    
    [Property]
    var LevelToCreate : Level = Level.Find("SpawnIcon");
    
    [Property]
    var OurCameraViewportName : String = "Camera";
    
    var SubSpace : Space = null;
    var SubCameraCog : Cog = null;
    var OurCameraViewport : CameraViewport = null;
    
    constructor() : base()
    {
    }

    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(init, Events.AllObjectsInitialized, this.OnAllObjectsCreated);
    }
    
    function OnAllObjectsCreated(e : CogInitializer)
    {
        var ourCameraViewportCog = this.Space.FindObjectByName(this.OurCameraViewportName);
        this.OurCameraViewport = ourCameraViewportCog.Camera.Viewport.CameraViewport;
    }
    
    [Static]
    function NdcToViweport(input : Real3) : Real3
    {
        input += local Real3(1.0);
        input /= local Real3(2.0);
        
        input.Y = 1.0 - input.Y;
        input.Z = 0.0;
        return input;
    }
    
    function OnLogicUpdate(e : UpdateEvent)
    {
        if (this.OurCameraViewport.Active == false)
        {
            return;
        }
        
        // We lazy create the space so that we don't needlessly create spaces for disabled viewports
        if (this.SubSpace == null)
        {
            this.SubSpace = Zero.Game.CreateSpace(this.SpaceToCreate.Name);
            this.SubSpace.LoadLevel(this.LevelToCreate);
            this.SubCameraCog = this.SubSpace.FindObjectByName("Camera");
            
            var toSend = new SpaceCameraEvent();
            toSend.Space = this.SubSpace;
            
            this.Owner.DispatchEvent("SpaceCameraCreated", toSend);
        }
        
        
        var tx = this.Owner.Transform;
        
        var offset = local Real3(tx.WorldScale.X, -tx.WorldScale.Y, 0.0);
        var topLeft = tx.WorldTranslation - offset;
        var bottomRight = tx.WorldTranslation + offset;
        
        var topLeftScreenNdc = this.OurCameraViewport.WorldToScreen(topLeft);
        var bottomRightScreenNdc = this.OurCameraViewport.WorldToScreen(bottomRight);
        
        var topLeftViewport = SpaceCamera.NdcToViweport(topLeftScreenNdc);
        var bottomRightViewport = SpaceCamera.NdcToViweport(bottomRightScreenNdc);
        
        var subCameraViewport = this.SubCameraCog.CameraViewport;
        
        subCameraViewport.NormalizedOffset = topLeftViewport.XY;
        subCameraViewport.NormalizedSize = (bottomRightViewport - topLeftViewport).XY;
    }
}

class SpaceCameraEvent : Event
{
    var Space : Space = null;
    
    constructor() : base()
    {
    }
}
