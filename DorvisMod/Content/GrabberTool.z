class GrabberTool : ScriptComponent
{
    //The minimum distance we can drag the object towards
    //the camera during mouse scroll.
    [Editable][Serialized]
    var MinDistance : Real = 3.0;
    
    //The maximum distance we can drag the objet away from the camera.
    [Editable][Serialized]
    var MaxDistance : Real = 100.0;
    
    //The object that we are currently grabbing
    var SelectedObj : Cog = null;
    //The current distance away from the camera that
    //the object's grab point should be.
    var Distance : Real = 0.0;
    
    var WeldJoint : WeldJoint = null;
    
    var CameraCog : Cog = null;
    
    constructor() : base()
    {
    }

    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Owner, "ActivateTool", this.OnActivateTool);
        Zero.Connect(this.Owner, "DeactivateTool", this.OnDeactivateTool);
    }
    
    function OnActivateTool(e : ToolChangeEvent)
    {
        this.CameraCog = e.CameraCog;
        Zero.Connect(e.Peer as Cog, Events.LockStepMouseMove, this.OnLockStepMouseMove);
        Zero.Connect(e.Peer as Cog, Events.LockStepMouseDown, this.OnLockStepMouseDown);
        Zero.Connect(e.Peer as Cog, Events.LockStepMouseUp, this.OnLockStepMouseUp);
        //Zero.Connect(peer as Cog, Events.MouseScroll, this.OnMouseScroll);
        //Zero.Connect(peer as Cog, Events.LockStepRightMouseDown, this.OnLockStepRightMouseDown);
    }
    
    function OnDeactivateTool(e : ToolChangeEvent)
    {
        Zero.Disconnect(e.Peer as Cog, Events.LockStepMouseMove, this as Component);
        Zero.Disconnect(e.Peer as Cog, Events.LockStepMouseDown, this as Component);
        Zero.Disconnect(e.Peer as Cog, Events.LockStepMouseUp, this as Component);
    }
    
    function OnLockStepMouseMove(e : LockStepMouseEvent)
    {
        this.UpdateDraggedObject(e);
    }
    
    function FreezeObject(e : LockStepMouseButtonEvent)
    {
        if(this.SelectedObj != null)
        {
            if(this.SelectedObj.RigidBody != null)
            {
                this.SelectedObj.RigidBody.Static = !this.SelectedObj.RigidBody.Static;
            }
        }
        else
        {
            var dirW = this.CameraCog.Orientation.GetWorldForward();
            var startW = this.CameraCog.Transform.WorldTranslation;
        
            var castResults = this.Space.PhysicsSpace.CastRayResults(startW, dirW, 1);
            foreach(var castResult in castResults)
            {
                var obj = castResult.GetObjectHit();
                obj = obj.GetRoot();
                
                if(obj.RigidBody != null)
                {
                    obj.RigidBody.Static = !obj.RigidBody.Static;
                }
            }
        }
    }
    
    function GrabObject(e : LockStepMouseButtonEvent)
    {
        if(this.SelectedObj != null)
        {
            this.DeselectObj();
        }
        
        var dirW = this.CameraCog.Orientation.GetWorldForward();
        var startW = this.CameraCog.Transform.WorldTranslation;
            
        var castResults = this.Space.PhysicsSpace.CastRayResults(startW, dirW, 2);
        foreach(var castResult in castResults)
        {
            var obj = castResult.GetObjectHit();
            obj = obj.GetRoot();
            if(obj == this.Owner.GetRoot())
            {
                continue;
            }
            
            this.SelectedObj = obj;
            if(this.SelectedObj == null)
            {
                return;
            }
            
            if(this.SelectedObj.RigidBody != null)
            {
                this.SelectedObj.RigidBody.ForceAwake();
            }
            
            //find the point at which we clicked the object
            var selectedPoint = castResult.GetWorldPosition();
            //find how far away the pick point is (for keeping the object on a sphere around us)
            this.Distance = Math.Length(selectedPoint - this.Owner.Transform.Translation);
            
            this.CreatePhyGun(this.SelectedObj,selectedPoint);
            break;
        }
    }
    
    function OnLockStepMouseDown(e : LockStepMouseButtonEvent)
    {
        if(e.RightPressed)
        {
            this.FreezeObject(e);
        }
        else
        {
            this.GrabObject(e);
        }
    }
    
    function OnLockStepMouseUp(e : LockStepMouseButtonEvent)
    {
        this.DeselectObj();
    }
    
    function DeselectObj()
    {
        if(this.SelectedObj == null)
        {
            return;
        }
        
        //mark that we have no selected object, and destroy the joint
        this.SelectedObj = null;
        
        this.WeldJoint.Owner.Destroy();
        this.WeldJoint = null;
    }
    
    function OnMouseScroll(e : LockStepMouseEvent)
    {
        ////if we do not have a selected object, there is nothing to drag
        //if(this.SelectedObj == null)
        //{
        //    return;
        //}
        //
        ////alter our grab distance but clamp between our min and max distance
        //this.Distance += e.Scroll.Y;
        //this.Distance = Math.Clamp(this.Distance, this.MinDistance, this.MaxDistance);
        ////now compute the new world position of the mouse
        //var newWorldPoint = this.ComputeWorldPoint(e);
        ////update the object we grabbed with the new world point
        //if(this.LockRotation)
        //{
        //    this.UpdatePhyGunPoint(newWorldPoint);
        //}
        //else
        //{
        //    this.UpdateManipulatorPoint(newWorldPoint);
        //}
    }
    
    function CreatePhyGun(obj : Cog, point : Real3)
    {
        //build a new manipulator joint attached by the picked point and save it
        var jointCreator = Zero.JointBuilder.CreateInstance();
        //jointCreator.ConnectToWorld = true;
        
        obj = obj.GetRoot();
        var mass = obj.RigidBody.GetMass();
        point = obj.RigidBody.WorldCenterOfMass;
        var cog = jointCreator.AttachWorld(this.CameraCog,obj,point,"WeldJoint");
        this.WeldJoint = cog.WeldJoint;
        this.WeldJoint.WorldPoint1 = point;
        this.WeldJoint.WorldPoint2 = point;
        this.WeldJoint.MaxForce = mass * 0.4;
    }
        
    function UpdateDraggedObject(e : LockStepMouseEvent)
    {
        //if we do not have a selected object, there is nothing to drag
        if(this.SelectedObj == null)
        {
            return;
        }
        
        var newWorldPoint = this.ComputeWorldPoint(e);
        
        this.UpdatePhyGunPoint(newWorldPoint);
    }
    
    function ComputeWorldPoint(e : LockStepMouseEvent) : Real3
    {
        //get the vector into the screen from where we clicked
        var viewPlaneNormal = this.CameraCog.Orientation.GetWorldForward();
        //we want to keep the point on the object we clicked at a fixed distance from us,
        //so use the viewPlaneNormal to find the point on the sphere defined by the
        //initial picking distance
        return this.CameraCog.Transform.WorldTranslation + viewPlaneNormal * local Real3(this.Distance);
    }
    
    
    function UpdatePhyGunPoint(worldPoint : Real3)
    {
        //this.PhyGunJoint.SetTargetPoint(worldPoint);
        //this.WeldJoint.WorldPoint1 = worldPoint;
        //this.WeldJoint.WorldPoint2 = worldPoint;
    }
}
